<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".gen.cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// Generated by T4 (TextTransform.exe) from the file SystemOverheadPerformanceTests.tt
//

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Unity.Collections;
using Unity.PerformanceTesting;
using Unity.Entities.Tests;
using Unity.Mathematics;
using Random = Unity.Mathematics.Random;

namespace Unity.Entities.PerformanceTests
{
    [TestFixture]
    [Category("Performance")]
    public sealed partial class SystemOverheadPerformanceTests : EntityPerformanceTestFixture
    {
<#
        for (int i = 0; i < 1000; ++i)
        {#>        <#=System("EmptySystem", i, false)#><#
        }#>

        Type[] emptySystemTypes = new []
        {
<#
        for (int i = 0; i < 1000; ++i)
        {#>    typeof(<#=SystemName("EmptySystem", i)#>),
        <#
        }#>

        };

        // TODO(DOTS-4654): these systems use .WithoutBurst() until Burst compilation speed improves.
<#
        for (int i = 0; i < 1000; ++i)
        {#>        <#=System("SchedulesEmptyJobSystem", i, true)#><#
        }#>

        Type[] scheduleSystemTypes = new []
        {
<#
        for (int i = 0; i < 1000; ++i)
        {#>    typeof(<#=SystemName("SchedulesEmptyJobSystem", i)#>),
        <#
        }#>

        };

        [Test, Performance]
        public void ComponentSystemGroup_Sorting_Performance([Values(1, 10, 100, 1000)] int systemCount)
        {
            World testWorld = default;
            SimulationSystemGroup simulationGroup = default;
            Measure.Method(
                () =>
                {
                    simulationGroup.SortSystems();
                })
                .SetUp(
                () =>
                {
                    testWorld = new World("Test World");
                    simulationGroup = testWorld.CreateSystemManaged<SimulationSystemGroup>();
                    for (int i = 0; i < systemCount; ++i)
                    {
                        simulationGroup.AddSystemToUpdateList(testWorld.CreateSystem(emptySystemTypes[i]));
                    }
                })
                .CleanUp(() => { testWorld.Dispose(); })
                .WarmupCount(1)
                .MeasurementCount(10)
                .SampleGroup($"ComponentSystemGroup_SortSystems_{systemCount}")
                .Run();
        }

        [Test, Performance]
        public void EmptySystem_NoMatchingEntities_Overhead()
        {
            using var testWorld = new World("Test World");
            var simulationGroup = testWorld.CreateSystemManaged<SimulationSystemGroup>();
            for (int i = 0; i < 1000; ++i)
            {
                simulationGroup.AddSystemToUpdateList(testWorld.CreateSystem(emptySystemTypes[i]));
            }

            Measure.Method(
                () =>
                {
                    testWorld.Update();
                })
                .WarmupCount(1)
                .MeasurementCount(10)
                .SampleGroup("NoMatchingEntity")
                .Run();
        }

        [Test, Performance]
        public void EmptySystem_OneMatchingEntity_Overhead()
        {
            using var testWorld = new World("Test World");
            var simulationGroup = testWorld.CreateSystemManaged<SimulationSystemGroup>();
            for (int i = 0; i < 1000; ++i)
            {
                simulationGroup.AddSystemToUpdateList(testWorld.CreateSystem(emptySystemTypes[i]));
            }

            testWorld.EntityManager.CreateEntity(typeof(EcsTestData));

            Measure.Method(
                () =>
                {
                    testWorld.Update();
                })
                .WarmupCount(1)
                .MeasurementCount(10)
                .SampleGroup("OneMatchingEntity")
                .Run();
        }

        [Test, Performance]
        public void ScheduleWithEntitiesForEach_OneMatchingEntity_Overhead()
        {
            using var testWorld = new World("Test World");
            var simulationGroup = testWorld.CreateSystemManaged<SimulationSystemGroup>();
            for (int i = 0; i < 1000; ++i)
            {
                simulationGroup.AddSystemToUpdateList(testWorld.CreateSystem(scheduleSystemTypes[i]));
            }

            testWorld.EntityManager.CreateEntity(typeof(EcsTestData));

            Measure.Method(
                () =>
                {
                    testWorld.Update();
                })
                .WarmupCount(1)
                .MeasurementCount(10)
                .SampleGroup("OneMatchingEntity")
                .Run();
        }
    }
}

<#+
    string SystemName(string systemName, int systemID)
    {
        var name = new StringBuilder();

        name.Append($"{systemName}{systemID}");

        return name.ToString();
    }

    string System(string systemName, int systemID, bool schedulesWork)
    {
        var name = SystemName(systemName, systemID);

        var systemDec = new StringBuilder();
        systemDec.Append(
            $"public partial class {name} : SystemBase {{ protected override void OnCreate() {{ GetEntityQuery(typeof(EcsTestData));}} ");

        if (schedulesWork)
        {
            systemDec.Append($"protected override void OnUpdate(){{Dependency = Entities.WithoutBurst().ForEach((ref EcsTestData data)=>{{ }}).Schedule(Dependency);}} }}");
        }
        else
        {
            systemDec.Append($"protected override void OnUpdate(){{}} }}");
        }

        systemDec.AppendLine();

        return systemDec.ToString();
    }
#>
